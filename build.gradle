import org.ajoberstar.grgit.Grgit

buildscript {
    repositories {
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:0.5.3.RELEASE'
        classpath 'com.github.jacobono:gradle-jaxb-plugin:1.3.6'
        classpath 'com.netflix.nebula:gradle-git-scm-plugin:3.0.1'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'wrapper'
apply plugin: 'maven-publish'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.github.jacobono.jaxb'
apply plugin: "nebula.gradle-git-scm"

def sourcesDirectory = "src/main/generated-sources"
sourceSets.main.java.srcDirs += sourcesDirectory

jar {
    baseName = 'jaxb-jar'
}

repositories {
    mavenCentral()
}

dependencies {

}

dependencies {
    jaxb "org.jvnet.jaxb2_commons:jaxb2-basics-ant:0.6.5"
    jaxb "org.jvnet.jaxb2_commons:jaxb2-basics:0.6.4"
    jaxb "org.jvnet.jaxb2_commons:jaxb2-basics-annotate:0.6.4"
    jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7-b41'
    jaxb 'com.sun.xml.bind:jaxb-impl:2.2.7-b41'
    jaxb 'javax.xml.bind:jaxb-api:2.2.7'
}

jaxb {
    System.setProperty('javax.xml.accessExternalSchema', 'all')
    xsdDir = "src/main/resources/xsd"
    episodesDir = sourcesDirectory + "/episodes"
    bindingsDir = "src/main/resources/xsd"
    bindings = ["jaxbBindings.xjb"]
    xjc {
        taskClassname      = "org.jvnet.jaxb2_commons.xjc.XJC2Task"
        destinationDir     = sourcesDirectory
        generatePackage    = "org.elkendev.api"
        args               = ["-Xinheritance", "-Xannotate"]
    }
}

clean {
    delete sourcesDirectory
}

compileJava.dependsOn(xjc)

ext.mavenVersion = "${versionMajor}.${versionMinor}.${versionPatch}-${versionBuild}-${releaseType}"

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId 'jaxb-jar'
            groupId 'org.elkendev.api'
            version mavenVersion
            from components.java
        }
    }
    repositories {
        maven {
            credentials {
                username "${repositoryUsername}"
                password "${repositoryPassword}"
            }
            url "${repositoryUrl}/libs-${releaseType.endsWith('SNAPSHOT') ? 'snapshot' : 'release' }-local"
        }
    }
}

task finishRelease() {

    doFirst {
        def jenkinsUrl = System.getenv("JENKINS_URL")
        if(jenkinsUrl == null || jenkinsUrl.isEmpty()) {
            throw new InvalidUserDataException("Can only update release from Jenkins");
        }
    }

    def rootRepo = Grgit.open(project.file("${projectDir}"))

    doLast {
        ant.propertyfile(file: "${projectDir}/gradle.properties") {
            entry( key: "versionPatch", value: versionPatch.toInteger() + 1)
        }

        rootRepo.add(patterns: ["gradle.properties"])
        rootRepo.commit(message: "Finalising ${mavenVersion} release")
        //todo fix below
        rootRepo.pull(rebase: false)
        rootRepo.push(all: false)

    }

}
